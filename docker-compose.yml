version: '3.8'

services:
  web:
    build: .
    container_name: sbr-web
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.main
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
      - DATABASE_URL=postgresql://sbr_user:sbr_password@db:5432/sbr_db
      - HALO_API_URL=${HALO_API_URL}
      - HALO_API_KEY=${HALO_API_KEY}
      - HALO_CLIENT_ID=${HALO_CLIENT_ID}
      - HALO_CLIENT_SECRET=${HALO_CLIENT_SECRET}
      - USE_MOCK_DATA=${USE_MOCK_DATA:-true}
      - COST_MFA_PER_USER=${COST_MFA_PER_USER:-3.00}
      - COST_EDR_PER_ENDPOINT=${COST_EDR_PER_ENDPOINT:-5.50}
      - COST_BACKUP_PER_SERVER=${COST_BACKUP_PER_SERVER:-45.00}
      - COST_SIEM_PER_USER=${COST_SIEM_PER_USER:-6.50}
      - THRESHOLD_PATCH_COMPLIANCE=${THRESHOLD_PATCH_COMPLIANCE:-95}
      - THRESHOLD_BACKUP_SUCCESS=${THRESHOLD_BACKUP_SUCCESS:-98}
      - THRESHOLD_EDR_COVERAGE=${THRESHOLD_EDR_COVERAGE:-90}
      - THRESHOLD_SLA_ATTAINMENT=${THRESHOLD_SLA_ATTAINMENT:-90}
    volumes:
      - ./reports:/app/reports
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sbr-network

  db:
    image: postgres:15-alpine
    container_name: sbr-db
    environment:
      - POSTGRES_USER=sbr_user
      - POSTGRES_PASSWORD=sbr_password
      - POSTGRES_DB=sbr_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sbr_user -d sbr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - sbr-network

volumes:
  postgres_data:
    driver: local

networks:
  sbr-network:
    driver: bridge

